--- a/dlls/winepulse.drv/pulse.c
+++ b/dlls/winepulse.drv/pulse.c
@@ -113,9 +113,6 @@ static pa_mainloop *pulse_ml;
 static struct list g_phys_speakers = LIST_INIT(g_phys_speakers);
 static struct list g_phys_sources = LIST_INIT(g_phys_sources);
 
-static const REFERENCE_TIME MinimumPeriod = 30000;
-static const REFERENCE_TIME DefaultPeriod = 100000;
-
 static pthread_mutex_t pulse_mutex;
 static pthread_cond_t pulse_cond = PTHREAD_COND_INITIALIZER;
 
@@ -725,12 +722,12 @@ static void pulse_probe_settings(int render, const char *pulse_name, WAVEFORMATE
     if (length)
         *def_period = *min_period = pa_bytes_to_usec(10 * length, &ss);
 
-    if (*min_period < MinimumPeriod)
-        *min_period = MinimumPeriod;
-
-    if (*def_period < DefaultPeriod)
-        *def_period = DefaultPeriod;
-
+    const char* penv = getenv("STAGING_AUDIO_PERIOD");
+    if (penv) {
+        int val = atoi(penv);
+        *def_period = *min_period = val;
+        printf("Staging audio period set to %d.\n", val);
+    }
     wfx->wFormatTag = WAVE_FORMAT_EXTENSIBLE;
     wfx->cbSize = sizeof(WAVEFORMATEXTENSIBLE) - sizeof(WAVEFORMATEX);
 
@@ -1133,6 +1130,13 @@ static NTSTATUS pulse_create_stream(void *args)
     if (duration < 3 * period)
         duration = 3 * period;
 
+    const char* denv = getenv("STAGING_AUDIO_DURATION");
+    if (denv) {
+        int val = atoi(denv);
+        duration = val;
+        printf("Staging audio duration set to %d.\n", val);
+    }
+    
     stream->def_period = period;
 
     stream->period_bytes = pa_frame_size(&stream->ss) * muldiv(period, stream->ss.rate, 10000000);
